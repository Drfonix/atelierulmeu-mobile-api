<?php

namespace App\Http\Controllers;

use App\Models\AuthRequest;
use App\Models\User;
use Illuminate\Foundation\Bus\DispatchesJobs;
use Illuminate\Foundation\Validation\ValidatesRequests;
use Illuminate\Http\Exceptions\HttpResponseException;
use Illuminate\Routing\Controller as BaseController;
use Symfony\Component\HttpFoundation\JsonResponse;

/**
 * @OA\Info(
 *     title="VehiGo API docs",
 *     version="1.0",
 *     description="This is an API documentation, generated by L5 Swagger",
 *     @OA\Contact(
 *        email="office@atelierulmeu.ro"
 *     )
 * )
 * @OA\Server(
 *     url="/api/v1",
 * )
 *   @OAS\SecurityScheme(securityScheme="bearerAuth",type="http",scheme="bearer", in="header")
 *
 *
 */
class Controller extends BaseController
{
    use  DispatchesJobs, ValidatesRequests;

    public function checkOrCreateAuthRequest(string $phoneNr, string $type, int $userId)
    {
        $params = [
            "phone" => $phoneNr,
            "type" => $type,
            "confirmed" => false,
            "user_id" => $userId
        ];
        $authRequest = $this->getAuthRequest($params);
        if(!$authRequest) {
            $authRequest = AuthRequest::create([
                'phone' => $phoneNr,
                'code' => AuthRequest::generateUniqueCode(),
                'type' => $type,
                'user_id' => $userId,
                'confirmed' => false,
                'created_at' => now()
            ]);
        } else {
            $authRequest->update([
                "code" => AuthRequest::generateUniqueCode()
            ]);
        }
        return $authRequest->fresh();
    }

    protected function getUserByPhoneOrThrowError(string $phone)
    {
        $user = User::query()->where(["phone" => $phone])->first();
        if(!$user) {
            throw new HttpResponseException(
                $this->errorResponse([],"User not found")
            );
        }
        return $user;
    }

    protected function getAuthRequestByParams(array $params)
    {
        $authRequest = AuthRequest::query()->where($params)->orderByDesc('created_at')->first();
        if(!$authRequest || $authRequest->confirmed) {
            throw new HttpResponseException(
                $this->errorResponse([],"Code not found")
            );
        }
        return $authRequest;
    }

    protected function getAuthRequest(array $params)
    {
        return AuthRequest::query()->where($params)->orderByDesc('created_at')->first();
    }

    protected function successResponse($data = [], string $message = '')
    {
        $response = [
            'status' => 'success',
            'message' => $message,
            'data' => $data
        ];
        return response()->json($response);
    }

    protected function errorResponse($data = [], string $message = '', $statusCode = JsonResponse::HTTP_BAD_REQUEST)
    {
        $response = [
            'status' => 'error',
            'message' => $message,
            'data' => $data
        ];
        return response()->json($response, $statusCode);
    }

    protected function checkResourceOwner($resource, User $user)
    {
        if($resource && $resource->user_id !== $user->id) {
            return  $this->errorResponse([], "You are not the resource owner");
        }
    }

}
